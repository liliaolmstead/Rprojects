colSums(counts(dds))
## Total number of normalized counts per sample
colSums(counts(dds, normalized=T))
## Plot dispersion estimates
plotDispEsts(dds)
CD4_CD8_meta <- meta %>%
rownames_to_column(var="samplename") %>%
as_tibble()
# DESeq2 creates a matrix when you use the counts() function
## First convert normalized_counts to a data frame and transfer the row names to a new column called "gene"
normalized_counts <- counts(dds, normalized=T) %>%
data.frame() %>%
rownames_to_column(var="gene")
# Next, merge together (ensembl IDs) the normalized counts data frame with a subset of the annotations in the tx2gene data frame (only the columns for ensembl gene IDs and gene symbols)
grch38annot <- tx2gene %>%
dplyr::select(ensgene, symbol) %>%
dplyr::distinct()
## This will bring in a column of gene symbols
normalized_counts <- merge(normalized_counts, grch38annot, by.x="gene", by.y="ensgene")
# Now create a tibble for the normalized counts
normalized_counts <- normalized_counts %>%
as_tibble()
normalized_counts
# Find the Ensembl ID of SCRIB
grch38annot[grch38annot$symbol == "SCRIB", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000274287", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000274287", intgroup="sampletype", returnData=TRUE)
# What is the data output of plotCounts()?
d %>% View()
write.table(d, file="results/SCRIB1_CD4_CD8_counts.txt", sep="\t", quote=F, col.names=NA)
# Plot the SCRIB normalized counts, using the samplenames (rownames(d) as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("SCRIB") +
theme(plot.title = element_text(hjust = 0.5))
# Find the Ensembl ID of SCRIB2
grch38annot[grch38annot$symbol == "SCRIB", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000180900", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000180900", intgroup="sampletype", returnData=TRUE)
# What is the data output of plotCounts()?
d %>% View()
write.table(d, file="results/SCRIB2_CD4_CD8_counts.txt", sep="\t", quote=F, col.names=NA)
# Plot the SCRIB2 normalized counts, using the samplenames (rownames(d) as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("SCRIB") +
theme(plot.title = element_text(hjust = 0.5))
# Find the Ensembl ID of LLGL1
grch38annot[grch38annot$symbol == "LLGL1", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000131899", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000131899", intgroup="sampletype", returnData=TRUE)
# What is the data output of plotCounts()?
d %>% View()
write.table(d, file="results/LLGL1_CD4_CD8_counts.txt", sep="\t", quote=F, col.names=NA)
# Plot the LLGL1 normalized counts, using the samplenames (rownames(d) as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("LLGL1") +
theme(plot.title = element_text(hjust = 0.5))
# Find the Ensembl ID of LLGL2
grch38annot[grch38annot$symbol == "LLGL2", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000073350", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000073350", intgroup="sampletype", returnData=TRUE)
# What is the data output of plotCounts()?
d %>% View()
write.table(d, file="results/LLGL2_CD4_CD8_counts.txt", sep="\t", quote=F, col.names=NA)
# Plot the LLGL2 normalized counts, using the samplenames (rownames(d) as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("LLGL2") +
theme(plot.title = element_text(hjust = 0.5))
# Find the Ensembl ID of PARD6A
grch38annot[grch38annot$symbol == "PARD6A", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000102981", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000102981", intgroup="sampletype", returnData=TRUE)
# What is the data output of plotCounts()?
d %>% View()
write.table(d, file="results/PARD6A_CD4_CD8_counts.txt", sep="\t", quote=F, col.names=NA)
# Plot the PARD6A normalized counts, using the samplenames (rownames(d) as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("PARD6A") +
theme(plot.title = element_text(hjust = 0.5))
# Find the Ensembl ID of PARD6B
grch38annot[grch38annot$symbol == "PARD6B", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000124171", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000124171", intgroup="sampletype", returnData=TRUE)
# What is the data output of plotCounts()?
d %>% View()
write.table(d, file="results/PARD6B_CD4_CD8_counts.txt", sep="\t", quote=F, col.names=NA)
# Plot the PARD6B normalized counts, using the samplenames (rownames(d) as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
theme_bw() +
ggtitle("PARD6B") +
theme(plot.title = element_text(hjust = 0.5))
# Find the Ensembl ID of PARD6G
grch38annot[grch38annot$symbol == "PARD6G", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000178184", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000178184", intgroup="sampletype", returnData=TRUE)
# What is the data output of plotCounts()?
d %>% View()
write.table(d, file="results/PARD6G_CD4_counts.txt", sep="\t", quote=F, col.names=NA)
write.table(d, file="results/PARD6G_CD4_CD8_counts.txt", sep="\t", quote=F, col.names=NA)
# Plot the PARD6G normalized counts, using the samplenames (rownames(d) as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("PARD6G") +
theme(plot.title = element_text(hjust = 0.5))
# Find the Ensembl ID of PARD3
grch38annot[grch38annot$symbol == "PARD3", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000148498", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000148498", intgroup="sampletype", returnData=TRUE)
write.table(d, file="results/PARD3_CD4_CD8_counts.txt", sep="\t", quote=F, col.names=NA)
# Find the Ensembl ID of DLG1
grch38annot[grch38annot$symbol == "DLG1", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000075711", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000075711", intgroup="sampletype", returnData=TRUE)
write.table(d, file="results/DLG1_CD4_CD8_counts.txt", sep="\t", quote=F, col.names=NA)
# Find the Ensembl ID of DLG2
grch38annot[grch38annot$symbol == "DLG2", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000150672", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000150672", intgroup="sampletype", returnData=TRUE)
write.table(d, file="results/DLG2_CD4_CD8_counts.txt", sep="\t", quote=F, col.names=NA)
# Find the Ensembl ID of DLG3
grch38annot[grch38annot$symbol == "DLG3", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000082458", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000082458", intgroup="sampletype", returnData=TRUE)
write.table(d, file="results/DLG3_CD4_CD8_counts.txt", sep="\t", quote=F, col.names=NA)
# Find the Ensembl ID of DLG4
grch38annot[grch38annot$symbol == "DLG4", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000132535", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000132535", intgroup="sampletype", returnData=TRUE)
write.table(d, file="results/DLG4_CD4_CD8_counts.txt", sep="\t", quote=F, col.names=NA)
# Find the Ensembl ID of DLG5
grch38annot[grch38annot$symbol == "DLG5", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000274429", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000274429", intgroup="sampletype", returnData=TRUE)
write.table(d, file="results/DLG5_CD4_CD8_counts.txt", sep="\t", quote=F, col.names=NA)
contrast_Activated_CD4 <- c("sampletype", "Activated_CD4", "Naive_CD4", "Activated_CD8", "Naive_CD8")
res_table_Activated_CD4 <- results(dds, contrast=contrast_Activated_CD4, alpha = 0.05)
?contrast
# Find the Ensembl ID of CRB1
grch38annot[grch38annot$symbol == "CRB1", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000134376", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000134376", intgroup="sampletype", returnData=TRUE)
write.table(d, file="results/CRB1_CD4_CD8_counts.txt", sep="\t", quote=F, col.names=NA)
# Find the Ensembl ID of CRB2
grch38annot[grch38annot$symbol == "CRB2", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000148204", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000148204", intgroup="sampletype", returnData=TRUE)
write.table(d, file="results/CRB2_CD4_CD8_counts.txt", sep="\t", quote=F, col.names=NA)
# Find the Ensembl ID of CRB3
grch38annot[grch38annot$symbol == "CRB3", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000130545", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000130545", intgroup="sampletype", returnData=TRUE)
write.table(d, file="results/CRB3_CD4_CD8_counts.txt", sep="\t", quote=F, col.names=NA)
# Find the Ensembl ID of MPP5
grch38annot[grch38annot$symbol == "MPP5", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000072415", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000072415", intgroup="sampletype", returnData=TRUE)
write.table(d, file="results/MPP5_CD4_CD8_counts.txt", sep="\t", quote=F, col.names=NA)
# Find the Ensembl ID of PALSJ
grch38annot[grch38annot$symbol == "PALSJ", "ensgene"]
# Find the Ensembl ID of PATJ
grch38annot[grch38annot$symbol == "PATJ", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000132849", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000132849", intgroup="sampletype", returnData=TRUE)
write.table(d, file="results/PATJ_CD4_CD8_counts.txt", sep="\t", quote=F, col.names=NA)
# Find the Ensembl ID of CRB1
grch38annot[grch38annot$symbol == "CRB1", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000134376", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000134376", intgroup="sampletype", returnData=TRUE)
write.table(d, file="results/CRB1_CD4_CD8_counts.txt", sep="\t", quote=F, col.names=NA)
# Find the Ensembl ID of CRB2
grch38annot[grch38annot$symbol == "CRB2", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000148204", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000148204", intgroup="sampletype", returnData=TRUE)
write.table(d, file="results/CRB2_CD4_CD8_counts.txt", sep="\t", quote=F, col.names=NA)
# Find the Ensembl ID of CRB3
grch38annot[grch38annot$symbol == "CRB3", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000130545", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000130545", intgroup="sampletype", returnData=TRUE)
write.table(d, file="results/CRB3_CD4_CD8_counts.txt", sep="\t", quote=F, col.names=NA)
# Find the Ensembl ID of MPP5
grch38annot[grch38annot$symbol == "MPP5", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000072415", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000072415", intgroup="sampletype", returnData=TRUE)
write.table(d, file="results/MPP5_CD4_CD8_counts.txt", sep="\t", quote=F, col.names=NA)
# Find the Ensembl ID of PATJ
grch38annot[grch38annot$symbol == "PATJ", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000132849", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000132849", intgroup="sampletype", returnData=TRUE)
write.table(d, file="results/PATJ_CD4_CD8_counts.txt", sep="\t", quote=F, col.names=NA)
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000132849", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000132849", intgroup="sampletype", returnData=TRUE)
# Plot the PATJ normalized counts, using the samplenames (rownames(d) as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_bar(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("PATJ") +
theme(plot.title = element_text(hjust = 0.5))
# Plot the PATJ normalized counts, using the samplenames (rownames(d) as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_bar(stat = "identity") +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("PATJ") +
theme(plot.title = element_text(hjust = 0.5))
# Plot the PATJ normalized counts, using the samplenames (rownames(d) as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_bar(stat = "identity") +
theme_bw() +
ggtitle("PATJ") +
theme(plot.title = element_text(hjust = 0.5))
# Plot the PATJ normalized counts, using the samplenames (rownames(d) as labels)
ggplot(d, aes(y = count, color = sampletype)) +
geom_bar(stat = "identity") +
theme_bw() +
ggtitle("PATJ") +
theme(plot.title = element_text(hjust = 0.5))
# Plot the PATJ normalized counts, using the samplenames (rownames(d) as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_bar(stat = "identity") +
theme_bw() +
ggtitle("PATJ") +
theme(plot.title = element_text(hjust = 0.5))
# Plot the PATJ normalized counts, using the samplenames (rownames(d) as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_bar(stat="identity", fill="steelblue") +
geom_text(aes(label=len), vjust=-0.3, size=3.5) +
theme_minimal()
# Plot the PATJ normalized counts, using the samplenames (rownames(d) as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_bar(stat="identity", fill="steelblue") +
ggtitle("PATJ") +
theme_minimal()
# Find the Ensembl ID of PARKCI
grch38annot[grch38annot$symbol == "PRKCI", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000163558", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000163558", intgroup="sampletype", returnData=TRUE)
write.table(d, file="results/PRKCI_CD4_CD8_counts.txt", sep="\t", quote=F, col.names=NA)
# Find the Ensembl ID of PARKCZ
grch38annot[grch38annot$symbol == "PRKCZ", "ensgene"]
# Find the Ensembl ID of PARKCZ
grch38annot[grch38annot$symbol == "PRKCZ", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000067606", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000067606", intgroup="sampletype", returnData=TRUE)
write.table(d, file="results/PRKCZ_CD4_CD8_counts.txt", sep="\t", quote=F, col.names=NA)
contrast_Activated_CD4 <- c("sampletype", "Activated_CD4", "Activated_CD8")
res_table_Activated_CD4 <- results(dds, contrast=contrast_Activated_CD4, alpha = 0.05)
class(res_table_Activated_CD4)
mcols(res_table_Activated_CD4, use.names=T)
res_table_Activated_CD4 %>% data.frame() %>% View()
## Summarize results
summary(res_table_Activated_CD4, alpha = 0.05)
#Extracting significant differentially expressed genes
### Set thresholds
padj.cutoff <- 0.05
res_table_Activated_CD4_tb <- res_table_Activated_CD4 %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
sig_Activated_CD4 <- res_table_Activated_CD4_tb %>%
filter(padj < padj.cutoff)
##How many genes are differentially expressed in the Activated_CD4 compared to Naive_CD4?
sig_Activated_CD4
#top 20 differentially expressed genes (by padj values)
## Order results by padj values
top20_sig_Activated_CD4_genes <- res_table_Activated_CD4_tb %>%
arrange(padj) %>% 	#Arrange rows by padj values
pull(gene) %>% 		#Extract character vector of ordered genes
head(n=20)		#Extract the first 20 genes
## normalized counts for top 20 significant genes
top20_sig_Activated_CD4_norm <- normalized_counts %>%
filter(gene %in% top20_sig_Activated_CD4_genes)
# Gathering the columns to have normalized counts to a single column
gathered_top20_sig_Activated_CD4 <- top20_sig_Activated_CD4_norm %>%
gather(colnames(top20_sig_Activated_CD4_norm)[2:7], key = "samplename", value = "normalized_counts")
## check the column header in the "gathered" data frame
View(gathered_top20_sig_Activated_CD4)
contrast_Activated_CD4 <- c("sampletype", "Naive_CD4", "Naive_CD8")
res_table_Activated_CD4 <- results(dds, contrast=contrast_Activated_CD4, alpha = 0.05)
class(res_table_Activated_CD4)
contrast_Activated_CD4 <- c("sampletype", "Naive_CD4", "Naive_CD8")
res_table_Activated_CD4 <- results(dds, contrast=contrast_Activated_CD4, alpha = 0.05)
class(res_table_Activated_CD4)
mcols(res_table_Activated_CD4, use.names=T)
res_table_Activated_CD4 %>% data.frame() %>% View()
## Summarize results
summary(res_table_Activated_CD4, alpha = 0.05)
#Extracting significant differentially expressed genes
### Set thresholds
padj.cutoff <- 0.05
res_table_Activated_CD4_tb <- res_table_Activated_CD4 %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
sig_Activated_CD4 <- res_table_Activated_CD4_tb %>%
filter(padj < padj.cutoff)
##How many genes are differentially expressed in the Activated_CD4 compared to Naive_CD4?
sig_Activated_CD4
#top 20 differentially expressed genes (by padj values)
## Order results by padj values
top20_sig_Activated_CD4_genes <- res_table_Activated_CD4_tb %>%
arrange(padj) %>% 	#Arrange rows by padj values
pull(gene) %>% 		#Extract character vector of ordered genes
head(n=20)		#Extract the first 20 genes
## normalized counts for top 20 significant genes
top20_sig_Activated_CD4_norm <- normalized_counts %>%
filter(gene %in% top20_sig_Activated_CD4_genes)
# Gathering the columns to have normalized counts to a single column
gathered_top20_sig_Activated_CD4 <- top20_sig_Activated_CD4_norm %>%
gather(colnames(top20_sig_Activated_CD4_norm)[2:7], key = "samplename", value = "normalized_counts")
## check the column header in the "gathered" data frame
View(gathered_top20_sig_Activated_CD4)
write.table(gathered_top20_sig_Activated_CD4, file="results/Top20DEGenes_Activated_list.txt", sep="\t", quote=F, col.names=NA)
gathered_top20_sig_Activated_CD4 <- inner_join(CD4_CD8_meta, gathered_top20_sig_Activated_CD4)
## plot using ggplot2
ggplot(gathered_top20_sig_Activated_CD4) +
geom_point(aes(x = symbol, y = normalized_counts, color = sampletype)) +
scale_y_log10() +
xlab("Genes") +
ylab("log10 Normalized Counts") +
ggtitle("Top 20 Significant DE Genes") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(plot.title = element_text(hjust = 0.5))
normalized_counts
View(counts(dds))
contrast_Activated_CD4 <- c("sampletype", "Activated_CD4", "Activated_CD8")
res_table_Activated_CD4 <- results(dds, contrast=contrast_Activated_CD4, alpha = 0.05)
class(res_table_Activated_CD4)
mcols(res_table_Activated_CD4, use.names=T)
res_table_Activated_CD4 %>% data.frame() %>% View()
## Summarize results
summary(res_table_Activated_CD4, alpha = 0.05)
#Extracting significant differentially expressed genes
### Set thresholds
padj.cutoff <- 0.05
res_table_Activated_CD4_tb <- res_table_Activated_CD4 %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
sig_Activated_CD4 <- res_table_Activated_CD4_tb %>%
filter(padj < padj.cutoff)
##How many genes are differentially expressed in the Activated_CD4 compared to Naive_CD4?
sig_Activated_CD4
#top 20 differentially expressed genes (by padj values)
## Order results by padj values
top20_sig_Activated_CD4_genes <- res_table_Activated_CD4_tb %>%
arrange(padj) %>% 	#Arrange rows by padj values
pull(gene) %>% 		#Extract character vector of ordered genes
head(n=20)		#Extract the first 20 genes
## normalized counts for top 20 significant genes
top20_sig_Activated_CD4_norm <- normalized_counts %>%
filter(gene %in% top20_sig_Activated_CD4_genes)
# Gathering the columns to have normalized counts to a single column
gathered_top20_sig_Activated_CD4 <- top20_sig_Activated_CD4_norm %>%
gather(colnames(top20_sig_Activated_CD4_norm)[2:7], key = "samplename", value = "normalized_counts")
## check the column header in the "gathered" data frame
View(gathered_top20_sig_Activated_CD4)
write.table(gathered_top20_sig_Activated_CD4, file="results/Top20DEGenes_Activated_list.txt", sep="\t", quote=F, col.names=NA)
gathered_top20_sig_Activated_CD4 <- inner_join(CD4_CD8_meta, gathered_top20_sig_Activated_CD4)
## plot using ggplot2
ggplot(gathered_top20_sig_Activated_CD4) +
geom_point(aes(x = symbol, y = normalized_counts, color = sampletype)) +
scale_y_log10() +
xlab("Genes") +
ylab("log10 Normalized Counts") +
ggtitle("Top 20 Significant DE Genes") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(plot.title = element_text(hjust = 0.5))
## Create a sampletable/metadata
sampletype <- factor(c(rep("Activated_CD4",3), rep("Activated_CD8", 3)))
## plot using ggplot2
ggplot(gathered_top20_sig_Activated_CD4) +
geom_point(aes(x = symbol, y = normalized_counts, color = sampletype)) +
scale_y_log10() +
xlab("Genes") +
ylab("log10 Normalized Counts") +
ggtitle("Top 20 Significant DE Genes") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(plot.title = element_text(hjust = 0.5))
contrast_Activated_CD4 <- c("sampletype", "Activated_CD4", "Activated_CD8")
res_table_Activated_CD4 <- results(dds, contrast=contrast_Activated_CD4, alpha = 0.05)
class(res_table_Activated_CD4)
mcols(res_table_Activated_CD4, use.names=T)
res_table_Activated_CD4 %>% data.frame() %>% View()
## Summarize results
summary(res_table_Activated_CD4, alpha = 0.05)
#Extracting significant differentially expressed genes
### Set thresholds
padj.cutoff <- 0.05
res_table_Activated_CD4_tb <- res_table_Activated_CD4 %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
sig_Activated_CD4 <- res_table_Activated_CD4_tb %>%
filter(padj < padj.cutoff)
##How many genes are differentially expressed in the Activated_CD4 compared to Naive_CD4?
sig_Activated_CD4
#top 20 differentially expressed genes (by padj values)
## Order results by padj values
top20_sig_Activated_CD4_genes <- res_table_Activated_CD4_tb %>%
arrange(padj) %>% 	#Arrange rows by padj values
pull(gene) %>% 		#Extract character vector of ordered genes
head(n=20)		#Extract the first 20 genes
## normalized counts for top 20 significant genes
top20_sig_Activated_CD4_norm <- normalized_counts %>%
filter(gene %in% top20_sig_Activated_CD4_genes)
# Gathering the columns to have normalized counts to a single column
gathered_top20_sig_Activated_CD4 <- top20_sig_Activated_CD4_norm %>%
gather(colnames(top20_sig_Activated_CD4_norm)[2:7], key = "samplename", value = "normalized_counts")
## check the column header in the "gathered" data frame
View(gathered_top20_sig_Activated_CD4)
write.table(gathered_top20_sig_Activated_CD4, file="results/Top20DEGenes_Activated_list.txt", sep="\t", quote=F, col.names=NA)
gathered_top20_sig_Activated_CD4 <- inner_join(CD4_CD8_meta, gathered_top20_sig_Activated_CD4)
## plot using ggplot2
ggplot(gathered_top20_sig_Activated_CD4) +
geom_point(aes(x = symbol, y = normalized_counts, color = sampletype)) +
scale_y_log10() +
xlab("Genes") +
ylab("log10 Normalized Counts") +
ggtitle("Top 20 Significant DE Genes") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(plot.title = element_text(hjust = 0.5))
## List all directories containing data
samples <- list.files(path = "./data", full.names = T, pattern="salmon$")
## Obtain a vector of all filenames including the path
files <- file.path(samples, "quant.sf")
## Since all quant files have the same name it is useful to have names for each element
names(files) <- str_replace(samples, "./data/", "") %>%
str_replace(".salmon", "")
# Load the annotation table for GrCh38
tx2gene <- read.delim("tx2gene_grch38_ens94.txt")
# Take a look at it
tx2gene %>% View()
?tximport   # let's take a look at the arguments for the tximport function
# Run tximport
txi <- tximport(files, type="salmon", tx2gene=tx2gene[,c("tx_id", "ensgene")], countsFromAbundance="lengthScaledTPM", ignoreTxVersion = TRUE)
attributes(txi)
# Look at the counts
txi$counts %>% View()
