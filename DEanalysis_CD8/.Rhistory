d <- plotCounts(dds, gene="ENSG00000284137", intgroup="sampletype", returnData=TRUE)
# What is the data output of plotCounts()?
d %>% View()
## Gene-level differential expression analysis using DESeq2
## Setup
### Bioconductor and CRAN libraries used
library(DESeq2)
library(tidyverse)
library(RColorBrewer)
library(pheatmap)
library(DEGreport)
library(tximport)
library(ggplot2)
library(ggrepel)
# Find the Ensembl ID of LLGL1
grch38annot[grch38annot$symbol == "LLGL1", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000284137", intgroup="sampletype")
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000284137", intgroup="sampletype")
# Find the Ensembl ID of SCRIB
grch38annot[grch38annot$symbol == "SCRIB", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000274287", intgroup="sampletype")
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000284137", intgroup="sampletype")
# Find the Ensembl ID of LLGL1
grch38annot[grch38annot$symbol == "LLGL1", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000131899", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000131899", intgroup="sampletype", returnData=TRUE)
# What is the data output of plotCounts()?
d %>% View()
# Plot the SCRIB normalized counts with color and no labels
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
theme_bw() +
ggtitle("LLGL1") +
theme(plot.title = element_text(hjust = 0.5))
# Find the Ensembl ID of LLGL2
grch38annot[grch38annot$symbol == "LLGL2", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000073350", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="EENSG00000073350", intgroup="sampletype", returnData=TRUE)
# What is the data output of plotCounts()?
d %>% View()
# Plot the SCRIB normalized counts with color and no labels
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
theme_bw() +
ggtitle("LLGL1") +
theme(plot.title = element_text(hjust = 0.5))
# Plot the SCRIB normalized counts with color and no labels
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
theme_bw() +
ggtitle("LLGL2") +
theme(plot.title = element_text(hjust = 0.5))
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000073350", intgroup="sampletype")
# Plot the SCRIB normalized counts with color and no labels
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
theme_bw() +
ggtitle("LLGL2") +
theme(plot.title = element_text(hjust = 0.5))
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000073350", intgroup="sampletype")
# Plot the SCRIB normalized counts with color and no labels
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
theme_bw() +
ggtitle("LLGL2") +
theme(plot.title = element_text(hjust = 0.5))
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000073350", intgroup="sampletype")
# Plot the SCRIB normalized counts with color and no labels
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
theme_bw() +
ggtitle("poop") +
theme(plot.title = element_text(hjust = 0.5))
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000073350", intgroup="sampletype")
# Plot the SCRIB normalized counts with color and no labels
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
theme_bw() +
ggtitle("poop") +
theme(plot.title = element_text(hjust = 0.5))
# Plot the SCRIB normalized counts with color and no labels
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
theme_bw() +
ggtitle("LLGL2") +
theme(plot.title = element_text(hjust = 0.5))
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000073350", intgroup="sampletype")
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000131899", intgroup="sampletype")
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000274287", intgroup="sampletype")
# Find the Ensembl ID of PARD6A
grch38annot[grch38annot$symbol == "PARD6A", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000073350", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000073350", intgroup="sampletype", returnData=TRUE)
# Plot the LLGL2 normalized counts with color and no labels
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
theme_bw() +
ggtitle("LLGL2") +
theme(plot.title = element_text(hjust = 0.5))
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000073350", intgroup="sampletype")
# What is the data output of plotCounts()?
d %>% View()
# Plot the LLGL2 normalized counts with color and no labels
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
theme_bw() +
ggtitle("LLGL2") +
theme(plot.title = element_text(hjust = 0.5))
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000073350", intgroup="sampletype")
# Plot the LLGL2 normalized counts with color and no labels
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
theme_bw() +
ggtitle("LLGL2") +
theme(plot.title = element_text(hjust = 0.5))
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000102981", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000102981", intgroup="sampletype", returnData=TRUE)
# What is the data output of plotCounts()?
d %>% View()
# Plot the PARD6A normalized counts, using the samplenames (rownames(d) as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("PARD6A") +
theme(plot.title = element_text(hjust = 0.5))
# Find the Ensembl ID of PARD6B
grch38annot[grch38annot$symbol == "PARD6A", "ensgene"]
# Find the Ensembl ID of PARD6B
grch38annot[grch38annot$symbol == "PARD6B", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000124171", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000124171", intgroup="sampletype", returnData=TRUE)
# Plot the PARD6B normalized counts, using the samplenames (rownames(d) as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("PARD6B") +
theme(plot.title = element_text(hjust = 0.5))
# Find the Ensembl ID of PARD6G
grch38annot[grch38annot$symbol == "PARD6G", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000178184", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000178184", intgroup="sampletype", returnData=TRUE)
# Plot the PARD6G normalized counts, using the samplenames (rownames(d) as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("PARD6G") +
theme(plot.title = element_text(hjust = 0.5))
# Find the Ensembl ID of PARD3
grch38annot[grch38annot$symbol == "PARD3", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000148498", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000148498", intgroup="sampletype", returnData=TRUE)
# Plot the PARD3 normalized counts, using the samplenames (rownames(d) as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("PARD3") +
theme(plot.title = element_text(hjust = 0.5))
# Find the Ensembl ID of DLG1
grch38annot[grch38annot$symbol == "DLG1", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000075711", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000075711", intgroup="sampletype", returnData=TRUE)
# Plot the PARD3 normalized counts, using the samplenames (rownames(d) as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("DLG1") +
theme(plot.title = element_text(hjust = 0.5))
# What is the data output of plotCounts()?
d %>% View()
# Find the Ensembl ID of DLG2
grch38annot[grch38annot$symbol == "DLG1", "ensgene"]
# Find the Ensembl ID of DLG2
grch38annot[grch38annot$symbol == "DLG2", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000150672", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000150672", intgroup="sampletype", returnData=TRUE)
# What is the data output of plotCounts()?
d %>% View()
# Plot the DLD2 normalized counts, using the samplenames (rownames(d) as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("DLG2") +
theme(plot.title = element_text(hjust = 0.5))
# Find the Ensembl ID of DLG3
grch38annot[grch38annot$symbol == "DLG3", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000082458", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000082458", intgroup="sampletype", returnData=TRUE)
# What is the data output of plotCounts()?
d %>% View()
# Plot the DLD3 normalized counts, using the samplenames (rownames(d) as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("DLG3") +
theme(plot.title = element_text(hjust = 0.5))
# Find the Ensembl ID of DLG4
grch38annot[grch38annot$symbol == "DLG4", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000132535", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000132535", intgroup="sampletype", returnData=TRUE)
# What is the data output of plotCounts()?
d %>% View()
# Plot the DLD4 normalized counts, using the samplenames (rownames(d) as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("DLG4") +
theme(plot.title = element_text(hjust = 0.5))
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000132535", intgroup="sampletype")
# Plot the DLD4 normalized counts, using the samplenames (rownames(d) as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("DLG4") +
theme(plot.title = element_text(hjust = 0.5))
# Plot the DLD4 normalized counts, using the samplenames (rownames(d) as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.2,h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("DLG4") +
theme(plot.title = element_text(hjust = 0.5))
# Plot the DLD4 normalized counts, using the samplenames (rownames(d) as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("DLG4") +
theme(plot.title = element_text(hjust = 0.5))
# Plot the DLD4 normalized counts, using the samplenames (rownames(d) as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 1)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("DLG4") +
theme(plot.title = element_text(hjust = 0.5))
# Plot the DLD4 normalized counts, using the samplenames (rownames(d) as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("DLG4") +
theme(plot.title = element_text(hjust = 0.5))
# Find the Ensembl ID of DLG5
grch38annot[grch38annot$symbol == "DLG5", "ensgene"]
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000151208", intgroup="sampletype")
# Plot expression for single gene
plotCounts(dds, gene="ENSG00000274429", intgroup="sampletype")
# Save plotcounts to a data frame object
d <- plotCounts(dds, gene="ENSG00000274429", intgroup="sampletype", returnData=TRUE)
# Plot the DLD5 normalized counts, using the samplenames (rownames(d) as labels)
ggplot(d, aes(x = sampletype, y = count, color = sampletype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("DLG5") +
theme(plot.title = element_text(hjust = 0.5))
# What is the data output of plotCounts()?
d %>% View()
## Gene-level differential expression analysis using DESeq2
## Setup
### Bioconductor and CRAN libraries used
library(DESeq2)
library(tidyverse)
library(RColorBrewer)
library(pheatmap)
library(DEGreport)
library(tximport)
library(ggplot2)
library(ggrepel)
#Volcano plot with top 10 DE gene labels
ggplot(res_table_Activated_CD8_tb, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(aes(colour = threshold_OE)) +
geom_text_repel(aes(label = genelabels)) +
ggtitle("Naive vs Activated CD8+") +
xlab("log2 fold change") +
ylab("-log10 adjusted p-value") +
theme(legend.position = "none",
plot.title = element_text(size = rel(1.5), hjust = 0.5),
axis.title = element_text(size = rel(1.25)))
## Sort by padj values
res_table_Activated_CD8_tb <- res_table_Activated_CD8_tb %>% arrange(padj)
res_table_Activated_CD8_tb <- res_table_Activated_CD8_tb %>%
mutate(threshold_OE = padj < 0.05 & abs(log2FoldChange) >= 0.58)
contrast_Activated_CD8 <- c("sampletype", "Activated_CD8", "Naive_CD8")
res_table_Activated_CD8 <- results(dds, contrast=contrast_Activated_CD8, alpha = 0.05)
contrast_Activated_CD8 <- c("sampletype", "Activated_CD8", "Naive_CD8")
res_table_Activated_CD8 <- results(dds, contrast=contrast_Activated_CD8, alpha = 0.05)
## List all directories containing data
samples <- list.files(path = "./data", full.names = T, pattern="salmon$")
## Obtain a vector of all filenames including the path
files <- file.path(samples, "quant.sf")
## List all directories containing data
samples <- list.files(path = "./data", full.names = T, pattern="salmon$")
## Obtain a vector of all filenames including the path
files <- file.path(samples, "quant.sf")
## Since all quant files have the same name it is useful to have names for each element
names(files) <- str_replace(samples, "./data/", "") %>%
str_replace(".salmon", "")
# Load the annotation table for GrCh38
tx2gene <- read.delim("tx2gene_grch38_ens94.txt")
# Take a look at it
tx2gene %>% View()
?tximport   # let's take a look at the arguments for the tximport function
# Run tximport
txi <- tximport(files, type="salmon", tx2gene=tx2gene[,c("tx_id", "ensgene")], countsFromAbundance="lengthScaledTPM", ignoreTxVersion = TRUE)
attributes(txi)
# Take a look at it
tx2gene %>% View()
?tximport   # let's take a look at the arguments for the tximport function
# Run tximport
txi <- tximport(files, type="salmon", tx2gene=tx2gene[,c("tx_id", "ensgene")], countsFromAbundance="lengthScaledTPM", ignoreTxVersion = TRUE)
attributes(txi)
# Look at the counts
txi$counts %>% View()
# Write the counts to an object
data <- txi$counts %>%
round() %>%
data.frame()
## Create a sampletable/metadata
sampletype <- factor(c(rep("Activated_CD8",3), rep("Naive_CD8", 3)))
meta <- data.frame(sampletype, row.names = colnames(txi$counts))
#To determine the appropriate statistical model, we need information about the distribution of counts. To get an idea about how RNA-seq counts are distributed, let’s plot the counts for a single sample
ggplot(data) +
geom_histogram(aes(x = Activated_CD8_Rep1), stat = "bin", bins = 200) +
xlab("Raw expression counts") +
ylab("Number of genes")
mean_counts <- apply(data[,1:3], 1, mean)        #The second argument '1' of 'apply' function indicates the function being applied to rows. Use '2' if applied to columns
variance_counts <- apply(data[,1:3], 1, var)
df <- data.frame(mean_counts, variance_counts)
ggplot(df) +
geom_point(aes(x=mean_counts, y=variance_counts)) +
scale_y_log10(limits = c(1,1e9)) +
scale_x_log10(limits = c(1,1e9)) +
geom_abline(intercept = 0, slope = 1, color="red")
#count normalization
### Check that sample names match in both files
all(colnames(txi$counts) %in% rownames(meta))
all(colnames(txi$counts) == rownames(meta))
## Create DESeq2Dataset object
dds <- DESeqDataSetFromTximport(txi, colData = meta, design = ~ sampletype)
View(counts(dds))
dds <- estimateSizeFactors(dds)
sizeFactors(dds)
normalized_counts <- counts(dds, normalized=TRUE)
### Transform counts for data visualization
rld <- rlog(dds, blind=TRUE)
### Plot PCA
plotPCA(rld, intgroup="sampletype")
#Hierarchical Clustering
### Extract the rlog matrix from the object
rld_mat <- assay(rld)    ## assay() is function from the "SummarizedExperiment" package that was loaded when you loaded DESeq2
### Compute pairwise correlation values
rld_cor <- cor(rld_mat)    ## cor() is a base R function
head(rld_cor)   ## check the output of cor(), make note of the rownames and colnames
### Load pheatmap package
library(pheatmap)
### Plot heatmap
pheatmap(rld_cor, annotation = meta)
#DE analysis
## Create DESeq2Dataset object
dds <- DESeqDataSetFromTximport(txi, colData = meta, design = ~ sampletype)
## Run analysis
dds <- DESeq(dds)
## Check the size factors
sizeFactors(dds)
## Total number of raw counts per sample
colSums(counts(dds))
## Total number of normalized counts per sample
colSums(counts(dds, normalized=T))
## Plot dispersion estimates
plotDispEsts(dds)
CD8_meta <- meta %>%
rownames_to_column(var="samplename") %>%
as_tibble()
# DESeq2 creates a matrix when you use the counts() function
## First convert normalized_counts to a data frame and transfer the row names to a new column called "gene"
normalized_counts <- counts(dds, normalized=T) %>%
data.frame() %>%
rownames_to_column(var="gene")
# Next, merge together (ensembl IDs) the normalized counts data frame with a subset of the annotations in the tx2gene data frame (only the columns for ensembl gene IDs and gene symbols)
grch38annot <- tx2gene %>%
dplyr::select(ensgene, symbol) %>%
dplyr::distinct()
## This will bring in a column of gene symbols
normalized_counts <- merge(normalized_counts, grch38annot, by.x="gene", by.y="ensgene")
# Now create a tibble for the normalized counts
normalized_counts <- normalized_counts %>%
as_tibble()
normalized_counts
# Find the Ensembl ID of SCRIB
grch38annot[grch38annot$symbol == "SCRIB", "ensgene"]
contrast_Activated_CD8 <- c("sampletype", "Activated_CD8", "Naive_CD8")
res_table_Activated_CD8 <- results(dds, contrast=contrast_Activated_CD8, alpha = 0.05)
class(res_table_Activated_CD8)
mcols(res_table_Activated_CD8, use.names=T)
res_table_Activated_CD8 %>% data.frame() %>% View()
## Summarize results
summary(res_table_Activated_CD8, alpha = 0.05)
#Extracting significant differentially expressed genes
### Set thresholds
padj.cutoff <- 0.05
res_table_Activated_CD8_tb <- res_table_Activated_CD8 %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
sig_Activated_CD8 <- res_table_Activated_CD8_tb %>%
filter(padj < padj.cutoff)
##How many genes are differentially expressed in the Activated_CD8 compared to Naive_CD8?
sig_Activated_CD8
#top 20 differentially expressed genes (by padj values)
## Order results by padj values
top20_sig_Activated_CD8_genes <- res_table_Activated_CD8_tb %>%
arrange(padj) %>% 	#Arrange rows by padj values
pull(gene) %>% 		#Extract character vector of ordered genes
head(n=20)		#Extract the first 20 genes
## normalized counts for top 20 significant genes
top20_sig_Activated_CD8_norm <- normalized_counts %>%
filter(gene %in% top20_sig_Activated_CD8_genes)
# Gathering the columns to have normalized counts to a single column
gathered_top20_sig_Activated_CD8 <- top20_sig_Activated_CD8_norm %>%
gather(colnames(top20_sig_Activated_CD8_norm)[2:7], key = "samplename", value = "normalized_counts")
## check the column header in the "gathered" data frame
View(gathered_top20_sig_Activated_CD8)
write.table(gathered_top20_sig_Activated_CD8, file="results/Top20DEGenes_list.txt", sep="\t", quote=F, col.names=NA)
gathered_top20_sig_Activated_CD8 <- inner_join(CD8_meta, gathered_top20_sig_Activated_CD8)
## plot using ggplot2
ggplot(gathered_top20_sig_Activated_CD8) +
geom_point(aes(x = symbol, y = normalized_counts, color = sampletype)) +
scale_y_log10() +
xlab("Genes") +
ylab("log10 Normalized Counts") +
ggtitle("Top 20 Significant DE Genes") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(plot.title = element_text(hjust = 0.5))
res_table_Activated_CD8_tb <- res_table_Activated_CD8_tb %>%
mutate(threshold_OE = padj < 0.05 & abs(log2FoldChange) >= 0.58)
## Volcano plot
ggplot(res_table_Activated_CD8_tb) +
geom_point(aes(x = log2FoldChange, y = -log10(padj), colour = threshold_OE)) +
ggtitle("Volcano Plot") +
xlab("log2 fold change") +
ylab("-log10 adjusted p-value") +
#scale_y_continuous(limits = c(0,50)) +
theme(legend.position = "none",
plot.title = element_text(size = rel(1.5), hjust = 0.5),
axis.title = element_text(size = rel(1.25)))
## Add all the gene symbols as a column from the grch38 table using bind_cols()
res_table_Activated_CD8_tb <- bind_cols(res_table_Activated_CD8_tb, symbol=grch38annot$symbol[match(res_table_Activated_CD8_tb$gene, grch38annot$ensgene)])
## Create an empty column to indicate which genes to label
res_table_Activated_CD8_tb <- res_table_Activated_CD8_tb %>% mutate(genelabels = "")
## Sort by padj values
res_table_Activated_CD8_tb <- res_table_Activated_CD8_tb %>% arrange(padj)
## Populate the genelabels column with contents of the gene symbols column for the first 10 rows, i.e. the top 10 most significantly expressed genes
res_table_Activated_CD8_tb$genelabels[1:10] <- as.character(res_table_Activated_CD8_tb$symbol[1:10])
View(res_table_Activated_CD8_tb)
#Volcano plot with top 10 DE gene labels
ggplot(res_table_Activated_CD8_tb, aes(x = log2FoldChange, y = -log10(padj))) +
geom_point(aes(colour = threshold_OE)) +
geom_text_repel(aes(label = genelabels)) +
ggtitle("Naive vs Activated CD8+") +
xlab("log2 fold change") +
ylab("-log10 adjusted p-value") +
theme(legend.position = "none",
plot.title = element_text(size = rel(1.5), hjust = 0.5),
axis.title = element_text(size = rel(1.25)))
